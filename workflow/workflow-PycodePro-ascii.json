{
  "id": "8b8dd896-3044-42b7-bce9-27e8186be558",
  "revision": 0,
  "last_node_id": 5,
  "last_link_id": 3,
  "nodes": [
    {
      "id": 4,
      "type": "LoadImage",
      "pos": [
        9981.826171875,
        2807.0654296875
      ],
      "size": [
        274.080078125,
        314
      ],
      "flags": {},
      "order": 0,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "IMAGE",
          "type": "IMAGE",
          "links": [
            1
          ]
        },
        {
          "name": "MASK",
          "type": "MASK",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.43",
        "Node name for S&R": "LoadImage",
        "widget_ue_connectable": {},
        "ttNbgOverride": {
          "color": "#2a363b",
          "bgcolor": "#3f5159",
          "groupcolor": "#3f789e"
        }
      },
      "widgets_values": [
        "20250526_2141_Macro-œil Émeraude Hypnotique_simple_compose_01jw71shy8ffev7me01s52r10m.png",
        "image"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 2,
      "type": "ShowText|pysssss",
      "pos": [
        10929.7373046875,
        2679.34375
      ],
      "size": [
        776.1216430664062,
        566.0594482421875
      ],
      "flags": {},
      "order": 2,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 2
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "shape": 6,
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfyui-custom-scripts",
        "ver": "1.2.5",
        "Node name for S&R": "ShowText|pysssss",
        "widget_ue_connectable": {},
        "ttNbgOverride": {
          "color": "#2a363b",
          "bgcolor": "#3f5159",
          "groupcolor": "#3f789e"
        }
      },
      "widgets_values": [
        "bdppdbbbddqwmmmZ0QOO0QLCJUUYUJCCJJJJJLLLQ00OO0OZOOZZZmmZZmmmmmZZZZZZZZOOOO00QLLLCJJJJYYYYYYYzzzzzzzXXXYUJLLQQOmmmpbpddbb\nbpddddppqwwwmZZZO00QLCCLQQLLLQQ0OZZmmmqpppddppbbbkbbkhhhkkkhhhhhkkkkkkbbbbddpqqwZOZZO0QQLLLCJYUUYXYUUUUJJLQQ0OZmmmqpppdb\npdddpqqqwwmZZO000000OOOOZZmwZZmqdbbdkhaoo*******ooooahhhbbddddpqpddddbbbbbkkhaaoahkkkbpqwwmZOQLCCCJJJJJJJCLQ0OOZmwwwqppp\ndpppqqwwwwmZOOOOOZZZZwwqdbbbdkao###MMM#**akkbpqwZ0LUJUYzXXcczuxxcYzczzXJJJCQQOmmqdkho*#*ohbppqwmOQQLLCLLLLQ00OOZmwwwwqpp\nddppqqwwwwmmZZwwqqppddbhoo*#MWWM#oahbpqwmOQCJXYUXunfxuf(\\jtj||/tj(||(\\njtfjxxvuvcYCLZqdka*#*ohkbpwZO0QQQQQQQQ0OOZmwwqqqp\ndddpqqqwwqqpppppddbhhaMW&WWM#ohbpwmZ0CJJUYYzzccuvcvxunuxtxvzxfjfx|/()xj)(|((tt|tfruuvXULOZdho##ohbdqmZZZ0OOOOOOZZmwwwqqp\nddddpdddddddbkhhho*MW&WM*oabpqqmO0QCJJJJCUJUJQQQLCQOQ0mLYCwQC00QXCUYQUznnxxnf11((//txxnvXUJQZph*M#abdqwwmZOOOOOOZZmwwwqp\nbbbbkkbbbkkhao*MWWWWM*ohbbpwOOOO00000QZmOmqqkhbbhh*oaokoh*hkbhbpqddpqwwZZZLLXnut|\\\\jrjrcXzvXJLZqb*M#okdpqwwZOZZZZZZZwqqq\nkkhhhaaaao*MW&&WM#*oahkbdqwmZmZmqqdkhoah***MM#MMMWMM***MMM###*oaahhhhhbkdpbdwdwZOQLLXzXznxvcXJQQZpk*#*ohbpqwmZZZZZmmmwqq\nhaaaoo***W888WM#*oahkkbddbddkaaoa*MW&M*WWWWW&%88%%%%%BBBBBBB%B%&WWWM#**oooahhhakhdm00ZLUYzvcXCLLJLmqko#*hkdpwmZZmZmmwwwq\naaoo*##M&8&WW#*ooahkbbbhha**#MWW8&88WW888%B@@@@$@@@@@%%%%%%%%%%%%%88&&&WWW88&M*ahhkdqmqqwO00LYcXYCL0wqbo*akbpwwwmmmwwwqq\no***MW&88&WM##*ooaaaao#MMWW&88%%W&W&8B@@@@@BBBBBBB%%88W&&&&WWWW&WWM*#MWW&%%%BB%W*oahhkkkpmwOLXucXUUQ0QOmh*ohbqwmwwwwqqpd\n**#MW&&&WWMMMM####MMW8&&&&8%88&WWW&%B@BB%%88&88&&&WM#M#ohaoaM#hoohhhkkaoo*MWMW8&MhddkhhhhbkbmZOO0QLUJL0Omqh*hbpwwwwqqpdd\n#MWW&&&WWWWWMMMWWMW888%%%%8&&WM##W8BB%8&WM*MWMMM#*aa#akhhddbaadqwwqqpdbbbkhh*#WMW#p0L0mdkkhhhdwmmQLQQ0LCQOwdahbpqqqqppdb\nMMW&&WWWWW&WW&8888%%%%%%8WW#*oo*M8%%WMMM#o*oaoaohhdphkhdahdbdh*dOXXXJJLZwwbahkkoM*omYvvYLZpbkhabwm0LCUJLQQOOZbkbpqqpddbb\nMWW&WW&WWW&88%%%%%%%%88WM*ohbbh#8%88Woa*#*oohpqdddpkhhbpbooooahhbz1){)/X0ZwmdddhkkoaQnftfnXLmdkhbqqm0LLLCCCQQZpbddppddbk\nWWW&&&&&&8%%%%%%%888&WM*ohkdpboW%8#oahoaahkbdwqoahkbdh*M&%BBB%8W*d|[][-_jQQZmmwpbkhadz/()|juXCOpbbpdqmOQQLCCCCCZqqpdddbk\nWWW&&&&&&8%8%%%%8&&W#*ohkdpqpkM88&MabkaahhpwwZQqpddk*8@$$$$$$$$@@%U{[?_<<UQ00OZdddbahQr)[}1\\jnzJOqdbbdqZZ0QLJJCL0Zqqpbkh\nMMWW&&&&8%%%%%88&WM*oakbdpwwpaW8&WoaaoohdqZOCOdpmpkM@$$$$$$$$$@@$$a\\{]]]_\\ULLOwwwqqqhpv(]-]}1(trcCZqdddqwmO0QLCJLLQZqpbh\nMMWW&888%%%8&88WM#*oakbdpqwwpa&&M*kpbkbbbbbdmQZZdh#@$$@@@@@@@@@@@$BJuuvvnzZOZZZwwZwqbbY|?___?}1(/xXQwpdhbpwZOLJJCLQQOwqb\nMMWW&&88&WM*W&&M#oahkbdpqqmwpaW&ModbbbpwpwwZQUZqpkM@@@@@@@@@@@@@@@$8hqmmZL000ZwwmwpdbkJ/?~+__?[})tjuUOpbbbdqmOQCUJJJLQOq\nMMWW&&WWM*aqMWMM*ahkbdqqqwwwphW8&W*bhkbdqwZUCwqOZpM@@@@@@@@@@@@@@@@%hmZmqUYUQZmqwOmqbkJ\\?~+___?[{)|fxYObkbbbpwZ0LUYYYYU0\n#MMMMMMM*ohboM##*oahbbdpqqwqpkM8&MawwbdwwqO0bpwOQmk8@@@@@@@@@@@@@@$&bm0J0OQQC0O0Oqbahpc(-~+++_-[{)|/jnUCOhooohdwZLUczvvz\n##**#M#*oakdpbo*oaahbbddpqqqpb*&M*bOOqqmwmQXCLZmQL0a%@@@@@@@@@@@@$%hOQmQzC0mpqZOZqpkkOj[~<_+_-?]{)(|/xY\\Xphoa##obZQYvucc\n*##*****ohbpqmwbhhkkbbbdqqqqpdaWWMopdhwZmZZmwQYYQOmmd*%@@@@@@@@@%MdO0ZqqQzJJQOmwmwwddX|-~++__-?]{1|\\/uvrCZkddo*##opOYnzv\no*o*****ahkdwZOOZqdbdbbdqqqqqpb#WWM*hkmwppwwwmCXOO0L0qdk*WW&&&#kwZOCLL0wOUOZQJZpdkbhOj{_~++__-][{)(|fu{||XOmwwqqd**bZYcu\noo*#*ohkhhhbqmZQCL0wpdppqqwqwqpk#&M#obqZ0ZwqqOJ00UYY0QYCQqO0mmOQYLOJLL0QYLQ0CQQmwbkwu(]+~~___-[[}{1(jrf(+tJUXccYQpo*bOXu\naoo*oahhhkdpqwZ0LJUC0Zwwqwwwwqqpb#&&#hqmmZqqmwpO0LYvuccYQJLYYZQYzL0nUOmdqwpwwpZqbhqc(]_+~+---?[[1)(\\|fjj[ncurjfXJmbahwCc\nhaaaaahkbbdpppqwZ0CYYUJQZmZZmmwwpk*&M*hhkbLmwpwZmCUOQCCOQcXCOLCQQZOUCLOOmpqZqwbahOu(]_++__?}}{1(||\\/)x?(cXczvnzUQZmmZ0LY\nhhhhahhkbdddpqqwwmmLYXXXYJQOOZmwwwdaMWW#hwQmbdpmOZwmQQ0wQQw0mw0COZpmqwmwQwkqbbbdLj{-+__--][1\\//tfjrrnvucXXXXzzzXzzcvcvzX\nkkkkhhhkbbddpwZOOQCUJCccvvcXYCQOZmwqb*WW#ohmqqqmmqpqZqOOmbbwwdppmwpqmqwbpqbhhhmc|[_+_-?]{))(|/fjnnxrrnnunnnnnxrjjft//jnc\nbbbbbkbbbbddqwmOQLCJC0CUzvnnuvcXJQOmwpk*MW#okpOOmbbqwL0qdbbqpbqddmZpqdhhohhapUf{?--?[}1(||\\ttjjtftfjffjjt//\\\\\\\\)()()|jnv\nddbddbbbkkkbdwZ000QLLLQCUYXXcnunvvcYC0Zwda#WW*hqqbkpqdqqdkhphkqqbbhhao*MMoqUj)[?]}1(||||\\|\\\\||||/fft//(|/|(1)(((}{1//xnn\npppdddddbbbbdwZZZOQ00QCJJUXXXzzvzuxxuvzXYJQZdho**o*o**ako*ahooaoooaakdmQXj|)1(||||/\\((/((||)(\\/|/ff\\|/{(f/\\//)|/)(|\\fxvY\nqqqqppdppddbdwwwZOZOQCLCJUYYUJUUUXvuunnxnxxxxucXUCL0OmwwqpppqwZOLYcuxjf/\\tt/\\\\ft/ft|(|1}1\\)|jjuxxxf|/tjj/(xf||(\\t|jffcXC\nwqwwqqqqqqpppdqZZmZOQLCJJCLCUYYYXXYYYzvuvcvxrfxxfjrjfjjjjjrjjjjfjjtt/f\\|/|1(}[(jrrjjjrxrrjfxjfnrrjtjrrffrfjf(/t\\jjfjnvUC\nmmmmmwwwqqqqpdqqqwwmZQLCCCJXYJUYYYYYXzzzYYYunvcxxccrxjjnjffxjr/fxf/j\\{)\\fxj//f//frxnuuvvxxnjxunjrncurjrnxtt/\\/f//xxjzYUJ\nZZOZZmZmmwwqqqqpqwmZZ0QLJCCUYUUYYUUYYULUXYUUJQUXzJXXcvXLzcvnuuYvncxuuxuxjxrnvxnvunxnxnunuuxvuxvccvrrnuxxj/j\\|t/(/vncUUUY\nZZOO0OOZmmmwqqqqqwwmZZOQLLCCJJUYJUzcYJzcccczCJUJCOJYUQCLXYJJJJJJXUCXXzUXvuuxnvuuxrnunnuucvvcvccnuuuuxxf//tft/r/jrcvYUYYX\nQOO0O0OOZZZZmwwwwwwwmZZOO0QLLCJUUYYYUzvvvcccYXzXULXXUCCCUJQCYJJJLYUYXcvvvxxjfrxjrxnxnvvvccccvunxvnxrff|tft||/jxnuzXYYYYY\nLLQQQQ000ZOZZmmmmwmmmmmZZZOOQLLLCJJJUYXzXcczXcvucXuuXzYUzXUXzXzccYvvrrrrrff/frrxxnuvcccccvvuunnnn\\//rf(\\\\(|ttxnuzXXXYYYY\nCJCLLCLQQ00OOOOZZZZZZZZZZZOO0000QQLCCJJUYXXzXzvvccuucvcznnvuunnnrxnnxxxxxxnunuuuvvccvvccvnuunrffffttjf\\t\\(/jxuuzzXXXYYYY\nJJJJJJCCCCLLQ0000OOOOOOOOOOOOO000QQLLCCJJUUYXXXzcccccvuvuunuunuvunnuuvvcccvvcccczcvnuuunxrjjrt\\/tt/fft\\jtfxxvczzczXXYYYY\nUJJUJJJJJJJJCJCJCLLQQQQ00O00Q00QQQQQLLLCCJJJUYUUXXYXXXXXzccccccccczXzXXXXXzccuuuuuxrjjftfjf//t//jttf(ttffxnnczzzzzzXYXYY\n"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 3,
      "type": "ShowText|pysssss",
      "pos": [
        10947.232421875,
        3418.48193359375
      ],
      "size": [
        210,
        332.3636474609375
      ],
      "flags": {},
      "order": 3,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 3
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "shape": 6,
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfyui-custom-scripts",
        "ver": "1.2.5",
        "Node name for S&R": "ShowText|pysssss",
        "widget_ue_connectable": {},
        "ttNbgOverride": {
          "color": "#2a363b",
          "bgcolor": "#3f5159",
          "groupcolor": "#3f789e"
        }
      },
      "widgets_values": [
        "WARNING: Executing arbitrary Python code is a security risk...\n\nImage reçue: 1536x1024 pixels, Mode: RGB\nASCII art généré avec succès. Dimensions: 120x44 caractères.\n"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 1,
      "type": "PyCodePro",
      "pos": [
        10363.1826171875,
        2763.10595703125
      ],
      "size": [
        457.9783630371094,
        1037.54248046875
      ],
      "flags": {},
      "order": 1,
      "mode": 0,
      "inputs": [
        {
          "name": "txt_in_1",
          "shape": 7,
          "type": "STRING",
          "link": null
        },
        {
          "name": "txt_in_2",
          "shape": 7,
          "type": "STRING",
          "link": null
        },
        {
          "name": "txt_in_3",
          "shape": 7,
          "type": "STRING",
          "link": null
        },
        {
          "name": "txt_in_4",
          "shape": 7,
          "type": "STRING",
          "link": null
        },
        {
          "name": "int_in_1",
          "shape": 7,
          "type": "INT",
          "link": null
        },
        {
          "name": "int_in_2",
          "shape": 7,
          "type": "INT",
          "link": null
        },
        {
          "name": "float_in_1",
          "shape": 7,
          "type": "FLOAT",
          "link": null
        },
        {
          "name": "float_in_2",
          "shape": 7,
          "type": "FLOAT",
          "link": null
        },
        {
          "name": "img_in_1",
          "shape": 7,
          "type": "IMAGE",
          "link": 1
        },
        {
          "name": "img_in_2",
          "shape": 7,
          "type": "IMAGE",
          "link": null
        },
        {
          "name": "mask_in",
          "shape": 7,
          "type": "MASK",
          "link": null
        },
        {
          "name": "latent_in",
          "shape": 7,
          "type": "LATENT",
          "link": null
        },
        {
          "name": "positive",
          "shape": 7,
          "type": "CONDITIONING",
          "link": null
        },
        {
          "name": "negative",
          "shape": 7,
          "type": "CONDITIONING",
          "link": null
        },
        {
          "name": "model",
          "shape": 7,
          "type": "MODEL",
          "link": null
        },
        {
          "name": "clip",
          "shape": 7,
          "type": "CLIP",
          "link": null
        },
        {
          "name": "vae",
          "shape": 7,
          "type": "VAE",
          "link": null
        },
        {
          "name": "audio_in",
          "shape": 7,
          "type": "*",
          "link": null
        },
        {
          "name": "video_in",
          "shape": 7,
          "type": "*",
          "link": null
        },
        {
          "name": "custom_in_1",
          "shape": 7,
          "type": "*",
          "link": null
        },
        {
          "name": "custom_in_2",
          "shape": 7,
          "type": "*",
          "link": null
        },
        {
          "name": "trigger",
          "shape": 7,
          "type": "*",
          "link": null
        }
      ],
      "outputs": [
        {
          "name": "txt_out_1",
          "type": "STRING",
          "links": [
            2
          ]
        },
        {
          "name": "txt_out_2",
          "type": "STRING",
          "links": null
        },
        {
          "name": "txt_out_3",
          "type": "STRING",
          "links": null
        },
        {
          "name": "txt_out_4",
          "type": "STRING",
          "links": null
        },
        {
          "name": "int_out_1",
          "type": "INT",
          "links": null
        },
        {
          "name": "int_out_2",
          "type": "INT",
          "links": null
        },
        {
          "name": "float_out_1",
          "type": "FLOAT",
          "links": null
        },
        {
          "name": "float_out_2",
          "type": "FLOAT",
          "links": null
        },
        {
          "name": "img_out_1",
          "type": "IMAGE",
          "links": null
        },
        {
          "name": "img_out_2",
          "type": "IMAGE",
          "links": null
        },
        {
          "name": "mask_out",
          "type": "MASK",
          "links": null
        },
        {
          "name": "latent_out",
          "type": "LATENT",
          "links": null
        },
        {
          "name": "positive",
          "type": "CONDITIONING",
          "links": null
        },
        {
          "name": "negative",
          "type": "CONDITIONING",
          "links": null
        },
        {
          "name": "model",
          "type": "MODEL",
          "links": null
        },
        {
          "name": "clip",
          "type": "CLIP",
          "links": null
        },
        {
          "name": "vae",
          "type": "VAE",
          "links": null
        },
        {
          "name": "audio_out",
          "type": "*",
          "links": null
        },
        {
          "name": "video_out",
          "type": "*",
          "links": null
        },
        {
          "name": "custom_out_1",
          "type": "*",
          "links": null
        },
        {
          "name": "custom_out_2",
          "type": "*",
          "links": null
        },
        {
          "name": "Console",
          "type": "STRING",
          "links": [
            3
          ]
        }
      ],
      "properties": {
        "Node name for S&R": "PyCodePro",
        "widget_ue_connectable": {},
        "ttNbgOverride": {
          "color": "#2a363b",
          "bgcolor": "#3f5159",
          "groupcolor": "#3f789e"
        }
      },
      "widgets_values": [
        "text_input",
        "# --- ascii_art_generator.py ---\n# Script pour le node PyCodePro: Convertit une image en ASCII art.\n\n# IN['img_in_1'] est l'image d'entrée (objet PIL.Image).\n# OUT['txt_out_1'] sera la chaîne de caractères contenant l'ASCII art.\n\n# --- PARAMÈTRES MODIFIABLES ---\n\n# La largeur de l'ASCII art en nombre de caractères.\n# Une valeur entre 80 et 150 est généralement bonne.\nASCII_WIDTH = 120\n\n# Les caractères utilisés pour représenter les niveaux de gris, du plus sombre au plus clair.\n# Vous pouvez expérimenter avec d'autres chaînes de caractères.\nASCII_CHARS = \"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\\\|()1{}[]?-_+~<>i!lI;:,\\\\\\\"^`'. \"\n\n# --- LOGIQUE DU SCRIPT ---\n\n# On récupère l'image depuis l'entrée 'img_in_1'\n# La méthode .get() évite une erreur si aucune image n'est connectée.\ninput_image = IN.get('img_in_1')\n\nif input_image:\n    print(f\"Image reçue: {input_image.size[0]}x{input_image.size[1]} pixels, Mode: {input_image.mode}\")\n\n    # 1. Redimensionner l'image pour correspondre à la largeur de l'ASCII art\n    original_width, original_height = input_image.size\n    aspect_ratio = original_height / float(original_width)\n    \n    # On ajuste la hauteur pour conserver les proportions.\n    # On multiplie par 0.55 car les caractères sont généralement plus hauts que larges.\n    # Cela évite que l'image paraisse étirée verticalement.\n    new_height = int(aspect_ratio * ASCII_WIDTH * 0.55)\n    resized_image = input_image.resize((ASCII_WIDTH, new_height))\n\n    # 2. Convertir l'image en niveaux de gris\n    # Le mode \"L\" correspond à une image 8-bit en noir et blanc.\n    grayscale_image = resized_image.convert(\"L\")\n\n    # 3. Mapper chaque pixel à un caractère ASCII\n    pixels = grayscale_image.getdata()\n    ascii_list = []\n    for pixel_value in pixels:\n        # La valeur du pixel (0-255) est mappée à un index dans notre chaîne ASCII_CHARS.\n        # Le dernier caractère de ASCII_CHARS est le plus \"clair\".\n        char_index = int((pixel_value / 255) * (len(ASCII_CHARS) - 1))\n        ascii_list.append(ASCII_CHARS[char_index])\n\n    # 4. Formater la liste de caractères en une seule chaîne avec des sauts de ligne\n    ascii_art_result = \"\".join(\n        [ascii_list[i] + '\\n' if (i + 1) % ASCII_WIDTH == 0 else ascii_list[i] for i in range(len(ascii_list))]\n    )\n    \n    # 5. Placer le résultat dans le dictionnaire de sortie OUT\n    OUT['txt_out_1'] = ascii_art_result\n\n    print(f\"ASCII art généré avec succès. Dimensions: {ASCII_WIDTH}x{new_height} caractères.\")\n\nelse:\n    # Si aucune image n'est fournie en entrée\n    message_erreur = \"ERREUR: Veuillez connecter une image à l'entrée 'img_in_1' du node PyCodePro.\"\n    OUT['txt_out_1'] = message_erreur\n    print(message_erreur)",
        "None"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    }
  ],
  "links": [
    [
      1,
      4,
      0,
      1,
      8,
      "IMAGE"
    ],
    [
      2,
      1,
      0,
      2,
      0,
      "STRING"
    ],
    [
      3,
      1,
      21,
      3,
      0,
      "STRING"
    ]
  ],
  "groups": [
    {
      "id": 1,
      "title": "ascii",
      "bounding": [
        9873.6455078125,
        2559.0693359375,
        1904.629150390625,
        1375.7161865234375
      ],
      "color": "#3f789e",
      "font_size": 24,
      "flags": {}
    }
  ],
  "config": {},
  "extra": {
    "ue_links": [],
    "links_added_by_ue": [],
    "ds": {
      "scale": 0.8264462809917354,
      "offset": [
        -9336.175754501372,
        -2399.250556241369
      ]
    },
    "frontendVersion": "1.23.4"
  },
  "version": 0.4
}